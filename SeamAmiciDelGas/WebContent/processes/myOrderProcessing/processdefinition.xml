<?xml version="1.0" encoding="UTF-8"?>

<process-definition  xmlns=""  name="myOrderProcessing">


	<start-state name="L'utente sottomette un ordine">
		<transition to="Ordine notificato a driver e contadini" name="invia_notifica_ai_gruppi_driver_contadino"></transition>
	</start-state>


	<task-node name="Ordine notificato a driver e contadini">
		<task name="accetta_ordine">
			<assignment pooled-actors="driver,utenteContadino,utenteGas"></assignment>
		</task>
		<event type="timer-create">
      <action name="timerDataMassimaScaduta" class="org.domain.SeamAmiciDelGas.processes.ChangeDueDateTimerOrdine">
        <timerName>dataMassimaTimer</timerName>
        <nomeData>dataMassimaShoppingCart</nomeData>
      </action>
    </event>
		<event type="node-leave">
			<action name="SpegniTuttoeVaiAvanti" class="org.domain.SeamAmiciDelGas.processes.CancelTaskAction">
			 <taskName>accetta_ordine</taskName>
			 </action>
		</event>
		<timer duedate="10 years" name="dataMassimaTimer" transition="ordine_non_preso_in_carico_entro_datamax"/>
		<transition to="Notifica utente ordine non preso in carico" name="ordine_non_preso_in_carico_entro_datamax"></transition>
		<transition to="Verifica disponibilita" name="ordine_preso_in_carico"></transition>
		<transition to="end-state1" name="ordine_eliminato_dall_utente"></transition>
	</task-node>

	<task-node name="Notifica utente ordine non disponibile">
		<task name="ReceiveOrderFailed">
			<assignment actor-id="#{customer.username}"></assignment>
		</task>
		<transition to="Ordine notificato a driver e contadini" name="ordine_rimesso_nel_pool"></transition>
	</task-node>

	<task-node name="Notifica utente ordine non preso in carico">
		<task name="timeOutDataMassima" >
			<assignment name="AssegnamentoTaskDataMassimaScaduta" class="org.domain.SeamAmiciDelGas.processes.DestinatarioHandlerOrdineDataMassimaScaduta">
				<nameTask>timeOutDataMassima</nameTask>
			</assignment>
		</task>
		<transition to="end-state2" name="notifica_inviata_ordine_non_preso_in_carico_termina_processo"></transition>
	</task-node>

	<task-node name="Notifica utente ordine preso in carico">
		<task name="ReceiveOrderAccepted">
			<assignment actor-id="#{customer.username}"></assignment>
		</task>
		<transition to="fork2" name="attendi_consegna"></transition>
	</task-node>

	<task-node name="Fb from responsabile consegna to contadino">
		<task name="utenteToContadinoWithDriver">
			<assignment actor-id="#{customer.username}"></assignment>
		</task>
		<task name="ContadinoToDriver">
			<assignment pooled-actors="utenteContadino"></assignment>
		</task>
		<task name="DriverToContadinoAndUtente">
			<assignment pooled-actors="driver"></assignment>
		</task>
		<transition to="join1" name="fb_responsabile_consegna_to_contadino"></transition>
	</task-node>

	<task-node name="Fb from customer to contadino per qualita">
		<task name="fbCustomerToContadino">
			<assignment actor-id="#{customer.username}"></assignment>
		</task>
		<transition to="join2" name="fb_customer_to_contadino"></transition>
	</task-node>

	<decision name="Verifica disponibilita">
		<transition to="Notifica utente ordine preso in carico" name="ordine_evaso">
			<condition expression="#{!myOrdine.pendente and myOrdine.evaso}"></condition>
		</transition>
		<transition to="Notifica utente ordine non disponibile" name="ordine_non_evaso">
		<condition expression="#{myOrdine.pendente and !myOrdine.evaso}"></condition>
		</transition>
	</decision>

	<decision name="Il driver ha partecipato alla spesa">
		<transition to="fork1" name="Si"></transition>
		<transition to="join2" name="No"></transition>
	</decision>

	<fork name="fork2">
		<transition to="Il driver ha partecipato alla spesa" name="toTask4"></transition>
		<transition to="Fb from customer to contadino per qualita" name="toTask1"></transition>
		<transition to="Fb from customer to responsabile consegna" name="toTask2"></transition>
		<transition to="Fb from responsabile cosegna to customer" name="toTask3"></transition>
	</fork>

	<join name="join2">
		<transition to="end-state3"></transition>
	</join>

	<task-node name="Fb from customer to responsabile consegna">
		<task name="fbCustomerToResponsabileConsegna"></task>
		<transition to="join2" name="fb_customer_to_responsabile_consegna"></transition>
	</task-node>

	<task-node name="Fb from responsabile cosegna to customer">
		<task name="fbResponsabileConsegnaToCustomer"></task>
		<transition to="join2" name="fb_responsabile_to_customer"></transition>
	</task-node>

	<task-node name="Fb from contadino to responsabile consegna">
		<transition to="join1" name="fb_contadino_to_responsabile_consegna"></transition>
	</task-node>

	<fork name="fork1">
		<transition to="Fb from contadino to responsabile consegna"></transition>
		<transition to="Fb from responsabile consegna to contadino"></transition>
	</fork>

	<join name="join1">
		<transition to="join2"></transition>
	</join>


	<end-state name="end-state1"></end-state>

	<end-state name="end-state2"></end-state>

	<end-state name="end-state3">
		<event type="node-enter">
			<action name="perstistAllInfo"></action>
		</event>
	</end-state>


</process-definition>