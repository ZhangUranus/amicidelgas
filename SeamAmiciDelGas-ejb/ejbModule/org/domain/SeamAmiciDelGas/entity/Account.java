package org.domain.SeamAmiciDelGas.entity;

// Generated 7-feb-2009 13.24.15 by Hibernate Tools 3.2.2.GA

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;

/**
 * Account generated by hbm2java
 */
@Entity
@Table(name = "account", catalog = "database_gas")
public class Account implements java.io.Serializable {

	private String username;
	private Utente utente;
	private Pagamentoelettronico pagamentoelettronico;
	private String pass;
	private Boolean bloccato;
	private Boolean elimato;
	private Boolean cancellato;
	private Boolean attivato;
	private Date dataRichiesta;
	private Date dataAccettazione;
	private Integer punteggioFeedback;
	private Set<Itinerario> itinerarios = new HashSet<Itinerario>(0);
	private Set<Cybercontadino> cybercontadinos = new HashSet<Cybercontadino>(0);
	private Set<Ruolo> ruolos = new HashSet<Ruolo>(0);
	private Set<Questionario> questionarios = new HashSet<Questionario>(0);
	private Set<Feedback> feedbacksForDestinatario = new HashSet<Feedback>(0);
	private Set<Feedback> feedbacksForSegnalatore = new HashSet<Feedback>(0);
	private Set<Feedback> feedbacksForValidatore = new HashSet<Feedback>(0);
	private Set<Ordine> ordines = new HashSet<Ordine>(0);

	public Account() {
	}

	public Account(String username, String pass) {
		this.username = username;
		this.pass = pass;
	}

	public Account(String username, Utente utente,
			Pagamentoelettronico pagamentoelettronico, String pass,
			Boolean bloccato, Boolean elimato, Boolean cancellato,
			Boolean attivato, Date dataRichiesta, Date dataAccettazione,
			Integer punteggioFeedback, Set<Itinerario> itinerarios,
			Set<Cybercontadino> cybercontadinos, Set<Ruolo> ruolos,
			Set<Questionario> questionarios,
			Set<Feedback> feedbacksForDestinatario,
			Set<Feedback> feedbacksForSegnalatore,
			Set<Feedback> feedbacksForValidatore, Set<Ordine> ordines) {
		this.username = username;
		this.utente = utente;
		this.pagamentoelettronico = pagamentoelettronico;
		this.pass = pass;
		this.bloccato = bloccato;
		this.elimato = elimato;
		this.cancellato = cancellato;
		this.attivato = attivato;
		this.dataRichiesta = dataRichiesta;
		this.dataAccettazione = dataAccettazione;
		this.punteggioFeedback = punteggioFeedback;
		this.itinerarios = itinerarios;
		this.cybercontadinos = cybercontadinos;
		this.ruolos = ruolos;
		this.questionarios = questionarios;
		this.feedbacksForDestinatario = feedbacksForDestinatario;
		this.feedbacksForSegnalatore = feedbacksForSegnalatore;
		this.feedbacksForValidatore = feedbacksForValidatore;
		this.ordines = ordines;
	}

	@Id
	@Column(name = "Username", unique = true, nullable = false, length = 20)
	@NotNull
	@Length(max = 20)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Utente_CodiceFiscale")
	public Utente getUtente() {
		return this.utente;
	}

	public void setUtente(Utente utente) {
		this.utente = utente;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PagamentoElettronico_idPagamentoElettronico")
	public Pagamentoelettronico getPagamentoelettronico() {
		return this.pagamentoelettronico;
	}

	public void setPagamentoelettronico(
			Pagamentoelettronico pagamentoelettronico) {
		this.pagamentoelettronico = pagamentoelettronico;
	}

	@Column(name = "Pass", nullable = false, length = 32)
	@NotNull
	@Length(max = 32)
	public String getPass() {
		return this.pass;
	}

	public void setPass(String pass) {
		this.pass = pass;
	}

	@Column(name = "Bloccato")
	public Boolean getBloccato() {
		return this.bloccato;
	}

	public void setBloccato(Boolean bloccato) {
		this.bloccato = bloccato;
	}

	@Column(name = "Elimato")
	public Boolean getElimato() {
		return this.elimato;
	}

	public void setElimato(Boolean elimato) {
		this.elimato = elimato;
	}

	@Column(name = "Cancellato")
	public Boolean getCancellato() {
		return this.cancellato;
	}

	public void setCancellato(Boolean cancellato) {
		this.cancellato = cancellato;
	}

	@Column(name = "Attivato")
	public Boolean getAttivato() {
		return this.attivato;
	}

	public void setAttivato(Boolean attivato) {
		this.attivato = attivato;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DataRichiesta", length = 10)
	public Date getDataRichiesta() {
		return this.dataRichiesta;
	}

	public void setDataRichiesta(Date dataRichiesta) {
		this.dataRichiesta = dataRichiesta;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DataAccettazione", length = 10)
	public Date getDataAccettazione() {
		return this.dataAccettazione;
	}

	public void setDataAccettazione(Date dataAccettazione) {
		this.dataAccettazione = dataAccettazione;
	}

	@Column(name = "PunteggioFeedback")
	public Integer getPunteggioFeedback() {
		return this.punteggioFeedback;
	}

	public void setPunteggioFeedback(Integer punteggioFeedback) {
		this.punteggioFeedback = punteggioFeedback;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Itinerario> getItinerarios() {
		return this.itinerarios;
	}

	public void setItinerarios(Set<Itinerario> itinerarios) {
		this.itinerarios = itinerarios;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Cybercontadino> getCybercontadinos() {
		return this.cybercontadinos;
	}

	public void setCybercontadinos(Set<Cybercontadino> cybercontadinos) {
		this.cybercontadinos = cybercontadinos;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Ruolo> getRuolos() {
		return this.ruolos;
	}

	public void setRuolos(Set<Ruolo> ruolos) {
		this.ruolos = ruolos;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Questionario> getQuestionarios() {
		return this.questionarios;
	}

	public void setQuestionarios(Set<Questionario> questionarios) {
		this.questionarios = questionarios;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "accountByDestinatario")
	public Set<Feedback> getFeedbacksForDestinatario() {
		return this.feedbacksForDestinatario;
	}

	public void setFeedbacksForDestinatario(
			Set<Feedback> feedbacksForDestinatario) {
		this.feedbacksForDestinatario = feedbacksForDestinatario;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "accountBySegnalatore")
	public Set<Feedback> getFeedbacksForSegnalatore() {
		return this.feedbacksForSegnalatore;
	}

	public void setFeedbacksForSegnalatore(Set<Feedback> feedbacksForSegnalatore) {
		this.feedbacksForSegnalatore = feedbacksForSegnalatore;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "accountByValidatore")
	public Set<Feedback> getFeedbacksForValidatore() {
		return this.feedbacksForValidatore;
	}

	public void setFeedbacksForValidatore(Set<Feedback> feedbacksForValidatore) {
		this.feedbacksForValidatore = feedbacksForValidatore;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Ordine> getOrdines() {
		return this.ordines;
	}

	public void setOrdines(Set<Ordine> ordines) {
		this.ordines = ordines;
	}

}
