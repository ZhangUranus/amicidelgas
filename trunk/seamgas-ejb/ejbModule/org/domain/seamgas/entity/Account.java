package org.domain.seamgas.entity;

// Generated 1-feb-2009 18.05.54 by Hibernate Tools 3.2.2.GA

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;

/**
 * Account generated by hbm2java
 */
@Entity
@Table(name = "account", catalog = "seam")
public class Account implements java.io.Serializable {

	private String username;
	private String pass;
	private boolean bloccato;
	private boolean elimato;
	private boolean cancellato;
	private boolean attivato;
	private Date dataRichiesta;
	private Date dataAccettazione;
	private int feedbackPositivo;
	private Set<Ordine> ordines = new HashSet<Ordine>(0);
	private Set<Itinerario> itinerarios = new HashSet<Itinerario>(0);
	private Set<Cybercontadino> cybercontadinos = new HashSet<Cybercontadino>(0);
	private Set<Ruolo> ruolos = new HashSet<Ruolo>(0);
	private Set<Feedback> feedbacksForDestinatario = new HashSet<Feedback>(0);
	private Set<Feedback> feedbacksForSegnalatore = new HashSet<Feedback>(0);
	private Set<Utente> utentes = new HashSet<Utente>(0);
	private Set<Feedback> feedbacksForValidatore = new HashSet<Feedback>(0);

	public Account() {
	}

	public Account(String username, String pass, boolean bloccato,
			boolean elimato, boolean cancellato, boolean attivato,
			Date dataRichiesta, int feedbackPositivo) {
		this.username = username;
		this.pass = pass;
		this.bloccato = bloccato;
		this.elimato = elimato;
		this.cancellato = cancellato;
		this.attivato = attivato;
		this.dataRichiesta = dataRichiesta;
		this.feedbackPositivo = feedbackPositivo;
	}

	public Account(String username, String pass, boolean bloccato,
			boolean elimato, boolean cancellato, boolean attivato,
			Date dataRichiesta, Date dataAccettazione, int feedbackPositivo,
			Set<Ordine> ordines, Set<Itinerario> itinerarios,
			Set<Cybercontadino> cybercontadinos, Set<Ruolo> ruolos,
			Set<Feedback> feedbacksForDestinatario,
			Set<Feedback> feedbacksForSegnalatore, Set<Utente> utentes,
			Set<Feedback> feedbacksForValidatore) {
		this.username = username;
		this.pass = pass;
		this.bloccato = bloccato;
		this.elimato = elimato;
		this.cancellato = cancellato;
		this.attivato = attivato;
		this.dataRichiesta = dataRichiesta;
		this.dataAccettazione = dataAccettazione;
		this.feedbackPositivo = feedbackPositivo;
		this.ordines = ordines;
		this.itinerarios = itinerarios;
		this.cybercontadinos = cybercontadinos;
		this.ruolos = ruolos;
		this.feedbacksForDestinatario = feedbacksForDestinatario;
		this.feedbacksForSegnalatore = feedbacksForSegnalatore;
		this.utentes = utentes;
		this.feedbacksForValidatore = feedbacksForValidatore;
	}

	@Id
	@Column(name = "Username", unique = true, nullable = false, length = 20)
	@NotNull
	@Length(max = 20)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "Pass", nullable = false, length = 10)
	@NotNull
	@Length(max = 10)
	public String getPass() {
		return this.pass;
	}

	public void setPass(String pass) {
		this.pass = pass;
	}

	@Column(name = "Bloccato", nullable = false)
	@NotNull
	public boolean isBloccato() {
		return this.bloccato;
	}

	public void setBloccato(boolean bloccato) {
		this.bloccato = bloccato;
	}

	@Column(name = "Elimato", nullable = false)
	@NotNull
	public boolean isElimato() {
		return this.elimato;
	}

	public void setElimato(boolean elimato) {
		this.elimato = elimato;
	}

	@Column(name = "Cancellato", nullable = false)
	@NotNull
	public boolean isCancellato() {
		return this.cancellato;
	}

	public void setCancellato(boolean cancellato) {
		this.cancellato = cancellato;
	}

	@Column(name = "Attivato", nullable = false)
	@NotNull
	public boolean isAttivato() {
		return this.attivato;
	}

	public void setAttivato(boolean attivato) {
		this.attivato = attivato;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DataRichiesta", nullable = false, length = 10)
	@NotNull
	public Date getDataRichiesta() {
		return this.dataRichiesta;
	}

	public void setDataRichiesta(Date dataRichiesta) {
		this.dataRichiesta = dataRichiesta;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DataAccettazione", length = 10)
	public Date getDataAccettazione() {
		return this.dataAccettazione;
	}

	public void setDataAccettazione(Date dataAccettazione) {
		this.dataAccettazione = dataAccettazione;
	}

	@Column(name = "FeedbackPositivo", nullable = false)
	@NotNull
	public int getFeedbackPositivo() {
		return this.feedbackPositivo;
	}

	public void setFeedbackPositivo(int feedbackPositivo) {
		this.feedbackPositivo = feedbackPositivo;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Ordine> getOrdines() {
		return this.ordines;
	}

	public void setOrdines(Set<Ordine> ordines) {
		this.ordines = ordines;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Itinerario> getItinerarios() {
		return this.itinerarios;
	}

	public void setItinerarios(Set<Itinerario> itinerarios) {
		this.itinerarios = itinerarios;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Cybercontadino> getCybercontadinos() {
		return this.cybercontadinos;
	}

	public void setCybercontadinos(Set<Cybercontadino> cybercontadinos) {
		this.cybercontadinos = cybercontadinos;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Ruolo> getRuolos() {
		return this.ruolos;
	}

	public void setRuolos(Set<Ruolo> ruolos) {
		this.ruolos = ruolos;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "accountByDestinatario")
	public Set<Feedback> getFeedbacksForDestinatario() {
		return this.feedbacksForDestinatario;
	}

	public void setFeedbacksForDestinatario(
			Set<Feedback> feedbacksForDestinatario) {
		this.feedbacksForDestinatario = feedbacksForDestinatario;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "accountBySegnalatore")
	public Set<Feedback> getFeedbacksForSegnalatore() {
		return this.feedbacksForSegnalatore;
	}

	public void setFeedbacksForSegnalatore(Set<Feedback> feedbacksForSegnalatore) {
		this.feedbacksForSegnalatore = feedbacksForSegnalatore;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Utente> getUtentes() {
		return this.utentes;
	}

	public void setUtentes(Set<Utente> utentes) {
		this.utentes = utentes;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "accountByValidatore")
	public Set<Feedback> getFeedbacksForValidatore() {
		return this.feedbacksForValidatore;
	}

	public void setFeedbacksForValidatore(Set<Feedback> feedbacksForValidatore) {
		this.feedbacksForValidatore = feedbacksForValidatore;
	}

}
