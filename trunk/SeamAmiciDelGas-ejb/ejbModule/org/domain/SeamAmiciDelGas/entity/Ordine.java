package org.domain.SeamAmiciDelGas.entity;

// Generated 7-feb-2009 13.24.15 by Hibernate Tools 3.2.2.GA

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.validator.NotNull;

/**
 * Ordine generated by hbm2java
 */
@Entity
@Table(name = "ordine", catalog = "database_gas")
public class Ordine implements java.io.Serializable {

	private static final long serialVersionUID = -1381613240078746827L;
	private Integer idordine;
	private Account account;
	private Date dataRichiesta;
	private Date dataConclusione;
	private Date dataMassimaConsegna;
	private boolean concluso;
	private boolean cancellato;
	private Account driver;
	private Set<Feedback> feedbacks = new HashSet<Feedback>(0);
	private Set<Articolo> articolos = new HashSet<Articolo>(0);

	public Ordine() {
	}
	
	public Ordine(Account account, Set<Articolo> articolos, Date dataRichiesta, 
			Date dataMassimaConsegna, boolean concluso, Account driver) {
		this.account = account;
		this.dataRichiesta = dataRichiesta;
		this.dataMassimaConsegna = dataMassimaConsegna;
		this.concluso = concluso;
		this.articolos = articolos;
		this.driver = driver;
	}

	public Ordine(Account account, Set<Articolo> articolos, Date dataRichiesta,
			Date dataConclusione, Date dataMassimaConsegna, 
			boolean concluso, boolean cancellato, Account driver,
			Set<Feedback> feedbacks) {
		this.account = account;
		this.articolos = articolos;
		this.dataRichiesta = dataRichiesta;
		this.dataConclusione = dataConclusione;
		this.dataMassimaConsegna = dataMassimaConsegna;
		this.concluso = concluso;
		this.driver = driver;
		this.cancellato = cancellato;
		this.feedbacks = feedbacks;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "IDOrdine", unique = true, nullable = false)
	public Integer getIdordine() {
		return this.idordine;
	}

	public void setIdordine(Integer idordine) {
		this.idordine = idordine;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Account_Username")
	public Account getAccount() {
		return this.account;
	}

	public void setAccount(Account account) {
		this.account = account;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DataRichiesta", nullable = false, length = 19)
	@NotNull
	public Date getDataRichiesta() {
		return this.dataRichiesta;
	}

	public void setDataRichiesta(Date dataRichiesta) {
		this.dataRichiesta = dataRichiesta;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DataMassimaConsegna", length = 19)
	@NotNull
	public Date getDataMassimaConsegna() {
		return this.dataMassimaConsegna;
	}

	public void setDataMassimaConsegna(Date dataMassimaConsegna) {
		this.dataMassimaConsegna = dataMassimaConsegna;
	}

	@Column(name = "Cancellato", nullable = true)
	public Boolean getCancellato() {
		return this.cancellato;
	}

	public void setCancellato(Boolean cancellato) {
		this.cancellato = cancellato;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "ordine")
	public Set<Feedback> getFeedbacks() {
		return this.feedbacks;
	}

	public void setFeedbacks(Set<Feedback> feedbacks) {
		this.feedbacks = feedbacks;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DataConclusione", length = 19)
	public Date getDataConclusione() {
		return dataConclusione;
	}

	public void setDataConclusione(Date dataConclusione) {
		this.dataConclusione = dataConclusione;
	}
	
	@Column(name = "Concluso", nullable = false)
	@NotNull
	public boolean isConcluso() {
		return concluso;
	}

	public void setConcluso(boolean concluso) {
		this.concluso = concluso;
	}

	public void setCancellato(boolean cancellato) {
		this.cancellato = cancellato;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "ordine")
	public Set<Articolo> getArticolos() {
		return articolos;
	}

	public void setArticolos(Set<Articolo> articolos) {
		this.articolos = articolos;
	}

	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Driver")
	@NotNull
	public Account getDriver() {
		return driver;
	}

	public void setDriver(Account driver) {
		this.driver = driver;
	}

}
