package org.domain.SeamAmiciDelGas.entity;

// Generated 7-feb-2009 12.59.42 by Hibernate Tools 3.2.2.GA

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;

/**
 * Ordine generated by hbm2java
 */
@Entity
@Table(name = "ordine", catalog = "database_gas")
public class Ordine implements java.io.Serializable {

	private Integer idordine;
	private Account account;
	private Articolo articolo;
	private Date dataRichiesta;
	private boolean pendente;
	private int quantita;
	private int quantitaMinUtente;
	private Date dataMassimaConsegna;
	private Boolean cancellato;
	private Date dataCancellazioneAccettazione;
	private String username;
	private Integer idarticolo;
	private Set<Feedback> feedbacks = new HashSet<Feedback>(0);
	private Set<Itinerario> itinerarios = new HashSet<Itinerario>(0);
	private Set<Feedback> feedbacks_1 = new HashSet<Feedback>(0);
	private Set<Itinerario> itinerarios_1 = new HashSet<Itinerario>(0);

	public Ordine() {
	}

	public Ordine(Date dataRichiesta, boolean pendente, int quantita,
			int quantitaMinUtente) {
		this.dataRichiesta = dataRichiesta;
		this.pendente = pendente;
		this.quantita = quantita;
		this.quantitaMinUtente = quantitaMinUtente;
	}

	public Ordine(Account account, Articolo articolo, Date dataRichiesta,
			boolean pendente, int quantita, int quantitaMinUtente,
			Date dataMassimaConsegna, Boolean cancellato,
			Date dataCancellazioneAccettazione, String username,
			Integer idarticolo, Set<Feedback> feedbacks,
			Set<Itinerario> itinerarios, Set<Feedback> feedbacks_1,
			Set<Itinerario> itinerarios_1) {
		this.account = account;
		this.articolo = articolo;
		this.dataRichiesta = dataRichiesta;
		this.pendente = pendente;
		this.quantita = quantita;
		this.quantitaMinUtente = quantitaMinUtente;
		this.dataMassimaConsegna = dataMassimaConsegna;
		this.cancellato = cancellato;
		this.dataCancellazioneAccettazione = dataCancellazioneAccettazione;
		this.username = username;
		this.idarticolo = idarticolo;
		this.feedbacks = feedbacks;
		this.itinerarios = itinerarios;
		this.feedbacks_1 = feedbacks_1;
		this.itinerarios_1 = itinerarios_1;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "IDOrdine", unique = true, nullable = false)
	public Integer getIdordine() {
		return this.idordine;
	}

	public void setIdordine(Integer idordine) {
		this.idordine = idordine;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Account_Username")
	public Account getAccount() {
		return this.account;
	}

	public void setAccount(Account account) {
		this.account = account;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Articolo_IDArticolo")
	public Articolo getArticolo() {
		return this.articolo;
	}

	public void setArticolo(Articolo articolo) {
		this.articolo = articolo;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DataRichiesta", nullable = false, length = 19)
	@NotNull
	public Date getDataRichiesta() {
		return this.dataRichiesta;
	}

	public void setDataRichiesta(Date dataRichiesta) {
		this.dataRichiesta = dataRichiesta;
	}

	@Column(name = "Pendente", nullable = false)
	@NotNull
	public boolean isPendente() {
		return this.pendente;
	}

	public void setPendente(boolean pendente) {
		this.pendente = pendente;
	}

	@Column(name = "Quantita", nullable = false)
	@NotNull
	public int getQuantita() {
		return this.quantita;
	}

	public void setQuantita(int quantita) {
		this.quantita = quantita;
	}

	@Column(name = "QuantitaMinUtente", nullable = false)
	@NotNull
	public int getQuantitaMinUtente() {
		return this.quantitaMinUtente;
	}

	public void setQuantitaMinUtente(int quantitaMinUtente) {
		this.quantitaMinUtente = quantitaMinUtente;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DataMassimaConsegna", length = 19)
	public Date getDataMassimaConsegna() {
		return this.dataMassimaConsegna;
	}

	public void setDataMassimaConsegna(Date dataMassimaConsegna) {
		this.dataMassimaConsegna = dataMassimaConsegna;
	}

	@Column(name = "Cancellato")
	public Boolean getCancellato() {
		return this.cancellato;
	}

	public void setCancellato(Boolean cancellato) {
		this.cancellato = cancellato;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DataCancellazioneAccettazione", length = 19)
	public Date getDataCancellazioneAccettazione() {
		return this.dataCancellazioneAccettazione;
	}

	public void setDataCancellazioneAccettazione(
			Date dataCancellazioneAccettazione) {
		this.dataCancellazioneAccettazione = dataCancellazioneAccettazione;
	}

	@Column(name = "Username", length = 20)
	@Length(max = 20)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "IDArticolo")
	public Integer getIdarticolo() {
		return this.idarticolo;
	}

	public void setIdarticolo(Integer idarticolo) {
		this.idarticolo = idarticolo;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "ordine")
	public Set<Feedback> getFeedbacks() {
		return this.feedbacks;
	}

	public void setFeedbacks(Set<Feedback> feedbacks) {
		this.feedbacks = feedbacks;
	}

	@ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	@JoinTable(name = "itinerario_has_ordine", catalog = "database_gas", joinColumns = { @JoinColumn(name = "IDOrdine", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "IDItinerario", nullable = false, updatable = false) })
	public Set<Itinerario> getItinerarios() {
		return this.itinerarios;
	}

	public void setItinerarios(Set<Itinerario> itinerarios) {
		this.itinerarios = itinerarios;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "ordine")
	public Set<Feedback> getFeedbacks_1() {
		return this.feedbacks_1;
	}

	public void setFeedbacks_1(Set<Feedback> feedbacks_1) {
		this.feedbacks_1 = feedbacks_1;
	}

	@ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	@JoinTable(name = "itinerario_has_ordine", catalog = "database_gas", joinColumns = { @JoinColumn(name = "IDOrdine", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "IDItinerario", nullable = false, updatable = false) })
	public Set<Itinerario> getItinerarios_1() {
		return this.itinerarios_1;
	}

	public void setItinerarios_1(Set<Itinerario> itinerarios_1) {
		this.itinerarios_1 = itinerarios_1;
	}

}
