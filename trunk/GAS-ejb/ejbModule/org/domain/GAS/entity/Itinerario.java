package org.domain.GAS.entity;

// Generated 7-feb-2009 13.24.15 by Hibernate Tools 3.2.2.GA

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.validator.Future;
import org.hibernate.validator.NotNull;
import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Role;

/**
 * Itinerario generated by hbm2java
 */
@Entity
@Name(value="newItinerario")
@Role(name = "creaItinerario", scope = ScopeType.PAGE)
@Table(name = "itinerario", catalog = "database_gas")
public class Itinerario implements java.io.Serializable, Comparable<Itinerario> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 7853361748929253666L;
	private Integer iditinerario;
	private Account account;
	private Date dataPartenza;
	private Date dataConsegna;
	private Date dataCreazione;
	private Set<PuntiDiConsegna> puntiDiConsegnas = new HashSet<PuntiDiConsegna>(
			0);
	private Set<Cybercontadino> cybercontadinos = new HashSet<Cybercontadino>(0);

	public Itinerario() {
	}

	public Itinerario(Account account, Date dataPartenza, Date dataConsegna,
			Date dataCreazione) {
		this.account = account;
		this.dataPartenza = dataPartenza;
		this.dataConsegna = dataConsegna;
		this.dataCreazione = dataCreazione;
	}

	public Itinerario(Account account, Date dataPartenza, Date dataConsegna,
			Date dataCreazione,
			Set<PuntiDiConsegna> puntiDiConsegnas,
			Set<Cybercontadino> cybercontadinos) {
		this.account = account;
		this.dataPartenza = dataPartenza;
		this.dataConsegna = dataConsegna;
		this.dataCreazione = dataCreazione;
		this.puntiDiConsegnas = puntiDiConsegnas;
		this.cybercontadinos = cybercontadinos;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "IDItinerario", unique = true, nullable = false)
	public Integer getIditinerario() {
		return this.iditinerario;
	}

	public void setIditinerario(Integer iditinerario) {
		this.iditinerario = iditinerario;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Username", nullable = false)
	@NotNull
	public Account getAccount() {
		return this.account;
	}

	public void setAccount(Account account) {
		this.account = account;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DataPartenza", nullable = false, length = 19)
	@NotNull
	public Date getDataPartenza() {
		return this.dataPartenza;
	}

	public void setDataPartenza(Date dataPartenza) {
		this.dataPartenza = dataPartenza;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DataConsegna", nullable = false, length = 19)
	@Future
	@NotNull
	public Date getDataConsegna() {
		return this.dataConsegna;
	}

	public void setDataConsegna(Date dataConsegna) {
		this.dataConsegna = dataConsegna;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DataCreazione", nullable = false, length = 19)
	@NotNull
	public Date getDataCreazione() {
		return this.dataCreazione;
	}

	public void setDataCreazione(Date dataCreazione) {
		this.dataCreazione = dataCreazione;
	}

	@ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	@JoinTable(name = "itinerario_has_punti_di_consegna", catalog = "database_gas", joinColumns = { @JoinColumn(name = "IDItinerario", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "IDPuntiConsegna", nullable = false, updatable = false) })
	public Set<PuntiDiConsegna> getPuntiDiConsegnas() {
		return this.puntiDiConsegnas;
	}

	public void setPuntiDiConsegnas(Set<PuntiDiConsegna> puntiDiConsegnas) {
		this.puntiDiConsegnas = puntiDiConsegnas;
	}

	@ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	@JoinTable(name = "itinerario_has_cybercontadino", catalog = "database_gas", joinColumns = { @JoinColumn(name = "IDItinerario", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "PartitaIVA", nullable = false, updatable = false) })
	public Set<Cybercontadino> getCybercontadinos() {
		return this.cybercontadinos;
	}

	public void setCybercontadinos(Set<Cybercontadino> cybercontadinos) {
		this.cybercontadinos = cybercontadinos;
	}
	
	public boolean equals(Object obj) {
		if(obj==null) return false;
		Itinerario it = (Itinerario) obj;
		return iditinerario.equals(it.getIditinerario());
	}

	public int compareTo(Itinerario iter) {
		return this.getIditinerario().compareTo(iter.getIditinerario());
	}

}
